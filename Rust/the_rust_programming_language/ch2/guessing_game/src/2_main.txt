use rand::Rng;
use std::io; // Rng is a trait that defines methods that random number generators implement

fn main() {
    println!("Guess the number!");

    let secret_number = rand::thread_rng().gen_range(1..=100);

    // thread_rng is a function from rand that gives us the particular random number generator
    // it will be seeded by the operating system and is local to the current thread of execution
    // also this means that each thread in your program will have its own separate and independent random number generator, and the random numbers generated by one thread will not affect the random numbers generated by other threads.
    // This is a secure way to get random numbers, as the operating system's entropy source is designed to provide unpredictable and non-repeating values.
    // gen_range is defined by the Rng trait, it
    // gets a random number between 1 and 100

    // cargo doc --open command will build documentation provided by all of your dependencies locally and open it in your browser

    println!("The secret number is: {}", secret_number);
    println!("Please input your guess.");

    let mut guess = String::new();

    io::stdin()
        .read_line(&mut guess)
        .expect("Failed to read line");

    println!("You guessed: {guess}");

    /*
    generating secret random number between 1 and 100
    we will be using rand crate for this
    crate is a collection of rust source code files
    also known as packages in other languages
    crate.io is a repository of crates
    cargo is a package manager for rust
    cargo.toml is a configuration file for cargo
    cargo.lock is a file that keeps track of the exact version of dependencies
    cargo.lock is automatically generated by cargo
    our project is a binary crates
      add rand = "0.0.0" to cargo.toml
      cargo build to download and build the rand crate
      cargo update to update the rand crate version
    */
}
