{"ast":null,"code":"var _jsxFileName = \"/home/beel/Documents/WebDev/ReactJS/ReactBasics/01-starting-setup/src/components/ExpenseItems.js\";\n// * component that'll render expenseitems\n// ? we create functions to create componenets\n// * Function name convention.. use same name as file name\nimport './ExpenseItems.css'; // function ExpenseItems() {\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExpenseItems(props) {\n  const expenseDate = new Date(2022, 5, 21); //default js constructor \n\n  const expenseTitle = \"Car Insurance\";\n  const expenseAmount = 30000;\n  return (\n    /*#__PURE__*/\n    // <div className='expense-item'>\n    //   <div>May 24th 2022</div>\n    //   <div className='expense-item__description '>\n    //     <h2>Laptop</h2>\n    //   </div>\n    //   <div className='expense-item__price'>Rs. 1,00,000</div>\n    // </div>\n    // ! read till here first\n    // ? problem with this code is that it is a hard code and we want it to be dynamic so\n    // * we create constans and then add it using {} \n    // * code inside {} is normal js code\n    // <div className='expense-item'>\n    //   <div>{expenseDate.toISOString()}</div> \n    //   {/* Date gives the output as object so for string we did that */}\n    //   <div className='expense-item__description '>\n    //     <h2>{expenseTitle}</h2>\n    //   </div>\n    //   <div className='expense-item__price'>{expenseAmount}</div>\n    // </div>\n    // ? now again the problem with this code is that it is still hard code we just give values to variables \n    // ? we cant duplicate the component  \n    // * so for that we will creat an object array inside the App.js (here only because by convention and convinience)\n    // * then we will make use of props/ parameters here\n    // * Go to App.js\n    //* we have to use a parameter to get those title amount date indivually so we use props parameter name\n    // * props stands for properties\n    // * now we will call the parameter and its properties\n    _jsxDEV(\"div\", {\n      className: \"expense-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: expenseDate.toISOString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-item__description \",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: expenseTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-item__price\",\n        children: expenseAmount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  );\n} // 36\n\n\n_c = ExpenseItems;\nexport default ExpenseItems; //? now we'll import it in App.js\n// * then we can use this function as a HTML tag in our root component\n// * HTML tag for component will start with capital letter separating with other tags.. thats why component name should always start with capital\n//  *so that react will detect that it is a custom componenent\n// ! Rule of react ... we can only have one root component (div) inbside one jsx snippet\n// * so for multiple div we can combine all of them inside an outer single div\n// ? for styling create a css file of same name... there's nothing extra react related for css\n// * we have to tell react which css are you using so..\n// * import css\n// ! in JSX we use className = \"\" instead of class like in html\n// * Now commenting the function return code and see furthur notes there\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseItems\");","map":{"version":3,"names":["ExpenseItems","props","expenseDate","Date","expenseTitle","expenseAmount","toISOString"],"sources":["/home/beel/Documents/WebDev/ReactJS/ReactBasics/01-starting-setup/src/components/ExpenseItems.js"],"sourcesContent":["// * component that'll render expenseitems\n// ? we create functions to create componenets\n// * Function name convention.. use same name as file name\n\nimport './ExpenseItems.css';\n// function ExpenseItems() {\nfunction ExpenseItems(props) {\n  const expenseDate = new Date(2022, 5,21); //default js constructor \n  const expenseTitle = \"Car Insurance\"; \n  const expenseAmount = 30000; \n  return (\n    // <div className='expense-item'>\n    //   <div>May 24th 2022</div>\n    //   <div className='expense-item__description '>\n    //     <h2>Laptop</h2>\n    //   </div>\n    //   <div className='expense-item__price'>Rs. 1,00,000</div>\n    // </div>\n    // ! read till here first\n    // ? problem with this code is that it is a hard code and we want it to be dynamic so\n    // * we create constans and then add it using {} \n    // * code inside {} is normal js code\n\n      // <div className='expense-item'>\n      //   <div>{expenseDate.toISOString()}</div> \n      //   {/* Date gives the output as object so for string we did that */}\n      //   <div className='expense-item__description '>\n      //     <h2>{expenseTitle}</h2>\n      //   </div>\n      //   <div className='expense-item__price'>{expenseAmount}</div>\n      // </div>\n      // ? now again the problem with this code is that it is still hard code we just give values to variables \n      // ? we cant duplicate the component  \n      // * so for that we will creat an object array inside the App.js (here only because by convention and convinience)\n      // * then we will make use of props/ parameters here\n      // * Go to App.js\n\n      //* we have to use a parameter to get those title amount date indivually so we use props parameter name\n      // * props stands for properties\n      // * now we will call the parameter and its properties\n      <div className='expense-item'>\n        <div>{expenseDate.toISOString()}</div> \n        {/* Date gives the output as object so for string we did that */}\n        <div className='expense-item__description '>\n          <h2>{expenseTitle}</h2>\n        </div>\n        <div className='expense-item__price'>{expenseAmount}</div>\n      </div>\n  );\n}\n// 36\nexport default ExpenseItems;\n//? now we'll import it in App.js\n// * then we can use this function as a HTML tag in our root component\n// * HTML tag for component will start with capital letter separating with other tags.. thats why component name should always start with capital\n//  *so that react will detect that it is a custom componenent\n\n// ! Rule of react ... we can only have one root component (div) inbside one jsx snippet\n// * so for multiple div we can combine all of them inside an outer single div\n\n// ? for styling create a css file of same name... there's nothing extra react related for css\n\n// * we have to tell react which css are you using so..\n// * import css\n\n// ! in JSX we use className = \"\" instead of class like in html\n// * Now commenting the function return code and see furthur notes there"],"mappings":";AAAA;AACA;AACA;AAEA,OAAO,oBAAP,C,CACA;;;;AACA,SAASA,YAAT,CAAsBC,KAAtB,EAA6B;EAC3B,MAAMC,WAAW,GAAG,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAiB,EAAjB,CAApB,CAD2B,CACe;;EAC1C,MAAMC,YAAY,GAAG,eAArB;EACA,MAAMC,aAAa,GAAG,KAAtB;EACA;IAAA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;MAAK,SAAS,EAAC,cAAf;MAAA,wBACE;QAAA,UAAMH,WAAW,CAACI,WAAZ;MAAN;QAAA;QAAA;QAAA;MAAA,QADF,eAGE;QAAK,SAAS,EAAC,4BAAf;QAAA,uBACE;UAAA,UAAKF;QAAL;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QAHF,eAME;QAAK,SAAS,EAAC,qBAAf;QAAA,UAAsCC;MAAtC;QAAA;QAAA;QAAA;MAAA,QANF;IAAA;MAAA;MAAA;MAAA;IAAA;EA9BJ;AAuCD,C,CACD;;;KA5CSL,Y;AA6CT,eAAeA,YAAf,C,CACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA"},"metadata":{},"sourceType":"module"}