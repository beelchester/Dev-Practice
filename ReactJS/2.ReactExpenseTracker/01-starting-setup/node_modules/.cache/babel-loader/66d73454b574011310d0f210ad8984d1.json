{"ast":null,"code":"var _jsxFileName = \"/home/beel/Documents/WebDev/ReactJS/2.ReactExpenseTracker/01-starting-setup/src/components/NewExpense/ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExpenseForm() {\n  _s();\n\n  // ? using useState because we want to store that value\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n\n  const titleChangeHandler = event => {\n    // console.log(event)\n    //* like vanilla js event handler has default event object as parameter it also does here\n    //* after console log event object we see that target has value which is = to input we can use that\n    // console.log(event.target.value)\n    setEnteredTitle(event.target.value);\n  };\n\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value); // ? target value is always a empty string initially that's why we are giving useState('') to every one not nos.\n  };\n\n  const [enteredDate, setEnteredDate] = useState(\"\");\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value);\n  }; // * there is also the alternative concept of one state which I found to be unnecesserily complicated so im skiping that\n  // * also multiple state is mostly used like here\n  // * use prev to get the latest snapshot of the state as useState without that schedules the change not quickly run it.. example later\n  // * now we want those stored values as an object on submit\n  // * note use onSubmit in form not button\n\n\n  const submitHandler = event => {\n    event.preventDefault(); //* which prevents default behavior no request will be sent.. we need this because\n    // * by default after submiting thr page gets refreshed and we dont want that\n\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    };\n    console.log(expenseData);\n    setEnteredTitle('');\n    setEnteredAmount('');\n    setEnteredDate('');\n  }; // ? Two way binding\n  // but by using state, we have an advantage.\n  // We can now implement something\n  // which is called two-way binding, which simply means\n  // that for inputs we don't just listen to changes,\n  // but we can also pass a new value back into the input.\n  // So that we can reset or change the input programmatically.\n  // * we will do that using value attribute in input which will be the default value of input\n  // * also we can set state back to empty string after the form is submitted by using the code below\n  // * now we want the data to go to Newexpense and the App i.e. child to parent\n  // * we k that we can do parent to child using props \n  // * so to communicate child to parent we will send a function from parent to child\n  // * and then add the data iside that function in  child file \n  // ! note we can go child to parent or parent to child only step by step file to file like here App -> NewWxpense -> ExpenseForm and vice versa\n  // ! i.e. we cant skip componets in between\n  // ! Go to NewExpe \n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: enteredTitle,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: 0.1,\n          step: 0.1,\n          value: enteredAmount,\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          value: enteredDate,\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ExpenseForm, \"cQceuCgozgRBnFcek1NBqBcFFts=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","ExpenseForm","enteredTitle","setEnteredTitle","titleChangeHandler","event","target","value","enteredAmount","setEnteredAmount","amountChangeHandler","enteredDate","setEnteredDate","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","console","log"],"sources":["/home/beel/Documents/WebDev/ReactJS/2.ReactExpenseTracker/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nfunction ExpenseForm() {\n  // ? using useState because we want to store that value\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const titleChangeHandler = (event) => {\n    // console.log(event)\n    //* like vanilla js event handler has default event object as parameter it also does here\n    //* after console log event object we see that target has value which is = to input we can use that\n    // console.log(event.target.value)\n    setEnteredTitle(event.target.value);\n  };\n\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const amountChangeHandler = (event) => {\n    setEnteredAmount(event.target.value);\n    // ? target value is always a empty string initially that's why we are giving useState('') to every one not nos.\n  };\n  const [enteredDate, setEnteredDate] = useState(\"\");\n  const dateChangeHandler = (event) => {\n    setEnteredDate(event.target.value);\n  };\n  // * there is also the alternative concept of one state which I found to be unnecesserily complicated so im skiping that\n  // * also multiple state is mostly used like here\n\n  // * use prev to get the latest snapshot of the state as useState without that schedules the change not quickly run it.. example later\n  // * now we want those stored values as an object on submit\n  // * note use onSubmit in form not button\n  const submitHandler = (event) => {\n    event.preventDefault(); //* which prevents default behavior no request will be sent.. we need this because\n    // * by default after submiting thr page gets refreshed and we dont want that\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate),\n    };\n    console.log(expenseData);\n    setEnteredTitle('')\n    setEnteredAmount('')\n    setEnteredDate('')\n  };\n  // ? Two way binding\n    // but by using state, we have an advantage.\n    // We can now implement something\n    // which is called two-way binding, which simply means\n    // that for inputs we don't just listen to changes,\n    // but we can also pass a new value back into the input.\n    // So that we can reset or change the input programmatically.\n    // * we will do that using value attribute in input which will be the default value of input\n    // * also we can set state back to empty string after the form is submitted by using the code below\n// * now we want the data to go to Newexpense and the App i.e. child to parent\n// * we k that we can do parent to child using props \n// * so to communicate child to parent we will send a function from parent to child\n// * and then add the data iside that function in  child file \n// ! note we can go child to parent or parent to child only step by step file to file like here App -> NewWxpense -> ExpenseForm and vice versa\n// ! i.e. we cant skip componets in between\n// ! Go to NewExpe \n  return ( \n    <form onSubmit={submitHandler}>\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label>Title</label>\n          <input\n            type=\"text\"\n            value={enteredTitle}\n            onChange={titleChangeHandler}\n          />\n          {/* onChange works similar to onInput i.e. on every keystroke but also dropdowns so onChange is better */}\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Amount</label>\n          <input\n            type=\"number\"\n            min={0.1}\n            step={0.1}\n            value={enteredAmount}\n            onChange={amountChangeHandler}\n          />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Date</label>\n          <input\n            type=\"date\"\n            min=\"2019-01-01\"\n            max=\"2022-12-31\"\n            value={enteredDate}\n            onChange={dateChangeHandler}\n          />\n        </div>\n      </div>\n      <div className=\"new-expense__actions\">\n        <button type=\"submit\">Add Expense</button>\n      </div>\n      \n    </form>\n  );\n}\nexport default ExpenseForm;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,mBAAP;;;AACA,SAASC,WAAT,GAAuB;EAAA;;EACrB;EACA,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCH,QAAQ,CAAC,EAAD,CAAhD;;EACA,MAAMI,kBAAkB,GAAIC,KAAD,IAAW;IACpC;IACA;IACA;IACA;IACAF,eAAe,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;EACD,CAND;;EAQA,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,EAAD,CAAlD;;EACA,MAAMU,mBAAmB,GAAIL,KAAD,IAAW;IACrCI,gBAAgB,CAACJ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAhB,CADqC,CAErC;EACD,CAHD;;EAIA,MAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C;;EACA,MAAMa,iBAAiB,GAAIR,KAAD,IAAW;IACnCO,cAAc,CAACP,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;EACD,CAFD,CAjBqB,CAoBrB;EACA;EAEA;EACA;EACA;;;EACA,MAAMO,aAAa,GAAIT,KAAD,IAAW;IAC/BA,KAAK,CAACU,cAAN,GAD+B,CACP;IACxB;;IACA,MAAMC,WAAW,GAAG;MAClBC,KAAK,EAAEf,YADW;MAElBgB,MAAM,EAAEV,aAFU;MAGlBW,IAAI,EAAE,IAAIC,IAAJ,CAAST,WAAT;IAHY,CAApB;IAKAU,OAAO,CAACC,GAAR,CAAYN,WAAZ;IACAb,eAAe,CAAC,EAAD,CAAf;IACAM,gBAAgB,CAAC,EAAD,CAAhB;IACAG,cAAc,CAAC,EAAD,CAAd;EACD,CAZD,CA1BqB,CAuCrB;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;;;EACE,oBACE;IAAM,QAAQ,EAAEE,aAAhB;IAAA,wBACE;MAAK,SAAS,EAAC,uBAAf;MAAA,wBACE;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UACE,IAAI,EAAC,MADP;UAEE,KAAK,EAAEZ,YAFT;UAGE,QAAQ,EAAEE;QAHZ;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAUE;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UACE,IAAI,EAAC,QADP;UAEE,GAAG,EAAE,GAFP;UAGE,IAAI,EAAE,GAHR;UAIE,KAAK,EAAEI,aAJT;UAKE,QAAQ,EAAEE;QALZ;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QAVF,eAoBE;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UACE,IAAI,EAAC,MADP;UAEE,GAAG,EAAC,YAFN;UAGE,GAAG,EAAC,YAHN;UAIE,KAAK,EAAEC,WAJT;UAKE,QAAQ,EAAEE;QALZ;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QApBF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAgCE;MAAK,SAAS,EAAC,sBAAf;MAAA,uBACE;QAAQ,IAAI,EAAC,QAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAhCF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAuCD;;GA9FQZ,W;;KAAAA,W;AA+FT,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}